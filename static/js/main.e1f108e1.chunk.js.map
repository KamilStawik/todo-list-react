{"version":3,"sources":["GlobalStyle.js","reportWebVitals.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","styled.js","common/Container/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","features/author/AuthorText/styled.js","features/author/AuthorText/index.js","features/author/AuthorPage.js","features/tasks/TaskPage/styled.js","features/tasks/TaskPage/index.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/index.js","App.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","colors","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","status","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","id","index","findIndex","done","removeTask","splice","setAllDone","forEach","fetchExampleTasks","setTasks","setStateAsLoading","setStateAsReady","selectTasksState","actions","selectTasks","selectHideDone","selectStatus","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","all","put","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","UnorderedList","styled","ul","primaryColor","ListItem","li","StyledLink","NavLink","attrs","activeClassName","Container","main","StyledSection","section","breakPoints","mobile","Header","header","HeaderText","h2","Section","title","body","extraContent","StyledHeader","h1","StyledAuthorText","div","AuthorText","AuthorPage","DoneStatusBox","TaskPage","useParams","useSelector","taskId","find","getTaskById","content","StyledForm","form","Input","input","Button","button","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","newTaskContentTrimed","trim","dispatch","useDispatch","onSubmit","event","preventDefault","nanoid","current","focus","value","ref","onChange","target","autoFocus","required","placeholder","useQueryParameter","searchQueryParamName","location","useLocation","URLSearchParams","search","get","Wrapper","Search","query","replaceQueryParameter","history","useHistory","searchParams","key","undefined","delete","set","pathname","toString","useReplaceQueryParameter","StyledTasks","hidden","css","Content","span","greenButtonColor","toggleDone","remove","redButtonColor","Link","TaskList","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","StyledButtons","disabledColor","Buttons","exampleTasksButton","disabled","length","every","TasksPage","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1f108e1.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    body {\r\n        margin: 0;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n        background-color: ${({ theme }) => (theme.colors.backgroundColor)};\r\n        font-family: \"Lato\", sans-serif;\r\n    }\r\n    \r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n`;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        status: \"ready\",\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: id }) => {\r\n            const index = tasks.findIndex(task => task.id === id);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: id }) => {\r\n            const index = tasks.findIndex(task => task.id === id);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload }) => {\r\n            state.tasks = payload;\r\n        },\r\n        setStateAsLoading: state => {\r\n            state.status = \"loading\";\r\n        },\r\n        setStateAsReady: state => {\r\n            state.status = \"ready\";\r\n        },\r\n    },\r\n});\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n    setStateAsLoading,\r\n    setStateAsReady,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectStatus = state => selectTasksState(state).status;\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks\r\n    }\r\n\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\nexport default tasksSlice.reducer;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n    return await response.json();\r\n};","import { takeLatest, takeEvery, call, put, delay, all, select } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, setTasks, setStateAsReady, selectTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield all([\r\n            put(setTasks(exampleTasks)),\r\n            put(setStateAsReady()),\r\n        ]);\r\n    }\r\n    catch (error) {\r\n        yield call(alert, \"Coś nie zadziałało\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\"\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(tasksSaga);\r\n\r\nexport default store;","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const UnorderedList = styled.ul`\r\n    background-color: ${({ theme }) => (theme.colors.primaryColor)};\r\n    list-style: none;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    padding: 20px;\r\n`;\r\n\r\nexport const StyledLink = styled(NavLink).attrs(() => ({\r\n    activeClassName: \"active\",\r\n}))`\r\n    text-decoration: none;\r\n    color: hsl(0, 0%, 100%);\r\n    \r\n    &.active{\r\n        font-weight: bold;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n    max-width: 800px;\r\n    margin: 10px auto;\r\n    padding: 8px;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: hsl(0, 0%, 100%);\r\n    margin-top: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        justify-content: center;\r\n    }\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    padding-left: 20px;\r\n    border-bottom: 2px solid ${({ theme }) => (theme.colors.backgroundColor)};\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n            flex-wrap: wrap;\r\n            justify-content: center;\r\n    }\r\n`;\r\n\r\nexport const HeaderText = styled.h2`\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        flex-basis: 100%;\r\n    }\r\n`;","import { Header, HeaderText, StyledSection } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraContent }) => (\r\n    <StyledSection>\r\n        <Header>\r\n            <HeaderText>{title}</HeaderText>\r\n            {extraContent}\r\n        </Header>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.h1`\r\n    padding: 10px;\r\n    font-weight: 900;\r\n`;","import { StyledHeader } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <StyledHeader>\r\n            {title}\r\n        </StyledHeader>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledAuthorText = styled.div`\r\n    background-color: hsl(0, 0%, 100%);\r\n    padding: 20px;\r\n`;","import { StyledAuthorText } from \"./styled\";\r\n\r\nconst AuthorText = () => (\r\n    <StyledAuthorText>\r\n        <p>\r\n            Nazywam się Kamil, mam 32 lata i prowdzę działalność gospodarczą w branży e-commerce, ale zawsze chciałem być <strong>programistą.</strong> 😎\r\n        </p>\r\n        <p>\r\n            Moją wielką życiową pasją są podróże i to zarówno te małe jak i duże. W ramach corocznych wakacji udało mi się już odwiedzić większość krajów na naszym kontynencie. Znacznie częściej zdaża mi się wygospodarować wolny weekend i wyjechać w góry. Najbardziej lubię polskie Tatry i Bieszczady.\r\n        </p>\r\n    </StyledAuthorText>\r\n);\r\n\r\nexport default AuthorText;","import { Container } from \"../../common/Container\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport AuthorText from \"./AuthorText\";\r\n\r\nconst AuthorPage = () => (\r\n    <Container>\r\n        <Header title=\"O autorze\" />\r\n        <Section\r\n            title=\"Kamil Stawik\"\r\n            body={<AuthorText />}\r\n        />\r\n    </Container>\r\n);\r\n\r\nexport default AuthorPage;","import styled from \"styled-components\";\r\n\r\nexport const DoneStatusBox = styled.div`\r\n    padding: 20px;\r\n`;","import { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\nimport { Container } from \"../../../common/Container\";\r\nimport { DoneStatusBox } from \"./styled\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\n\r\nconst TaskPage = () => {\r\n\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"Szczegóły zadania\" />\r\n            <Section\r\n                title={task ? task.content : \"Niestety nie znaleziono zadania 😢\"}\r\n                body={\r\n                    <DoneStatusBox>\r\n                        {task ? <strong>Ukończono: </strong> : \"\"}\r\n                        {task ? `${task.done === true ? \"Tak\" : \"Nie\"}` : \"\"}\r\n                    </DoneStatusBox>\r\n                }\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TaskPage;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    background-color: hsl(0, 0%, 100%);\r\n    margin-top: 2px;\r\n    margin-bottom: 10px;\r\n    padding: 20px 10px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n            flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    max-width: 100%;\r\n    padding: 8px;\r\n    margin: 10px;\r\n    flex-grow: 1;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    padding: 10px 20px;\r\n    background-color: ${({ theme }) => (theme.colors.primaryColor)};\r\n    color: hsl(0, 0%, 100%);\r\n    margin: 10px;\r\n    cursor: pointer;\r\n    justify-self: flex-end;\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n    \r\n    &:active {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media(max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        width: 100%;\r\n    }\r\n`;","import React, { useState, useRef } from \"react\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const newTaskContentTrimed = newTaskContent.trim();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (newTaskContentTrimed === \"\") {\r\n            return\r\n        };\r\n        dispatch(addTask({\r\n            content: newTaskContentTrimed,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                ref={inputRef}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                autoFocus\r\n                required\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>Dodaj zadanie!</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import { useLocation, useHistory } from \"react-router-dom\";\r\n\r\nconst useQueryParameter = (searchQueryParamName) => {\r\n    const location = useLocation();\r\n    return (new URLSearchParams(location.search).get(searchQueryParamName));\r\n};\r\n\r\nconst useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    return ({ key, value }) => {\r\n        value === undefined ? searchParams.delete(key) : searchParams.set(key, value);\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    }\r\n};\r\n\r\nexport { useQueryParameter, useReplaceQueryParameter };","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    padding: 20px 10px;\r\n    display: flex;\r\n    align-items: center; \r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 8px;\r\n    margin: 10px;\r\n    flex-grow: 1;\r\n`;","const searchQueryParamName = \"szukaj\";\r\n\r\nexport default searchQueryParamName;","import React from \"react\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport { Wrapper, Input } from \"./styled\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\n\r\nconst Search = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default Search","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const StyledTasks = styled.ul`\r\n    background-color: hsl(0, 0%, 100%);\r\n    list-style: none;\r\n    padding: 20px 10px;\r\n    margin-top: 2px;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    border-bottom: 1px solid ${({ theme }) => (theme.colors.backgroundColor)};\r\n    margin-top: 15px;\r\n    padding: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    word-break: break-word;\r\n    padding: 0px 10px;\r\n    flex-grow: 1;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    background-color: ${({ theme }) => (theme.colors.greenButtonColor)};\r\n    color: hsl(0, 0%, 100%);\r\n    font-weight: bold;\r\n    flex-shrink: 0;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => (theme.colors.greenButtonColor)};\r\n\r\n        &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => (theme.colors.redButtonColor)};\r\n\r\n        &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n    `} \r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => (theme.colors.primaryColor)};\r\n    \r\n    &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport { useQueryParameter } from \"../queryParameters\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { StyledTasks, ListItem, Content, Button, StyledLink } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <StyledTasks>\r\n            {tasks.map(task => (\r\n                <ListItem key={task.id} hidden={task.done && hideDone}>\r\n                    <Button onClick={() => dispatch(toggleTaskDone(task.id))} toggleDone>\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <StyledLink to={`/zadania/${task.id}`}>{task.content}</StyledLink>\r\n                    </Content>\r\n                    <Button onClick={() => dispatch(removeTask(task.id))} remove>\r\n                        🗑\r\n                    </Button>\r\n                </ListItem>\r\n            ))}\r\n        </StyledTasks>\r\n    );\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: hsl(0, 0%, 100%);\r\n    color: ${({ theme }) => (theme.colors.primaryColor)};\r\n    margin: 10px 20px 10px 0px;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n    &&:disabled {\r\n        color: ${({ theme }) => (theme.colors.disabledColor)};\r\n        filter: brightness(100%);\r\n        cursor: auto;\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    selectTasks,\r\n    toggleHideDone,\r\n    setAllDone,\r\n    selectHideDone,\r\n    fetchExampleTasks,\r\n    setStateAsLoading,\r\n    selectStatus,\r\n} from \"../../tasksSlice\";\r\nimport { StyledButtons, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ exampleTasksButton }) => {\r\n    const tasks = useSelector(selectTasks);\r\n    const status = useSelector(selectStatus);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    if (exampleTasksButton === true) {\r\n        return (\r\n            <StyledButtons>\r\n                <Button\r\n                    disabled={status === \"loading\" ? true : false}\r\n                    onClick={() => {\r\n                        dispatch(fetchExampleTasks())\r\n                        dispatch(setStateAsLoading())\r\n                    }}\r\n                >\r\n                    {status === \"ready\" ? \"Pobierz przykładowe zadania\" : \"Ładowanie\"}\r\n                </Button>\r\n            </StyledButtons >\r\n        );\r\n\r\n    } else {\r\n        return tasks.length > 0 && (\r\n            <StyledButtons>\r\n                <Button\r\n                    onClick={() => dispatch(toggleHideDone())}\r\n                >\r\n                    {hideDone === false ? \"Ukryj ukończone\" : \"Pokaż ukończone\"}\r\n                </Button>\r\n                <Button\r\n                    onClick={() => dispatch(setAllDone())}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Ukończ wszystkie\r\n                </Button>\r\n            </StyledButtons >\r\n        );\r\n    }\r\n};\r\n\r\nexport default Buttons;","import { Container } from \"../../../common/Container\";\nimport Form from \"./Form\";\nimport Search from \"./Search\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\n\nconst TasksPage = () => {\n    const exampleTasksButton = true;\n\n    return (\n        <Container>\n            <Header title=\"Lista zadań\" />\n            <Section\n                title=\"Dodaj nowe zadanie\"\n                body={<Form />}\n                extraContent={<Buttons exampleTasksButton={exampleTasksButton} />}\n            />\n            <Section\n                title=\"Wyszukiwarka\"\n                body={<Search />}\n            />\n            <Section\n                title=\"Lista zadań\"\n                body={<TaskList />}\n                extraContent={<Buttons />}\n            />\n        </Container>\n    );\n}\n\nexport default TasksPage;","import React from \"react\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { ListItem, UnorderedList, StyledLink } from \"./styled.js\";\r\nimport AuthorPage from \"./features/author/AuthorPage.js\";\r\nimport TaskPage from \"./features/tasks/TaskPage/index.js\"\r\nimport TasksPage from \"./features/tasks/TasksPage/index.js\"\r\n\r\nconst App = () => (\r\n    <HashRouter>\r\n        <nav>\r\n            <UnorderedList>\r\n                <ListItem>\r\n                    <StyledLink to=\"/zadania\">Zadania</StyledLink>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <StyledLink to=\"/autor\">O autorze</StyledLink>\r\n                </ListItem>\r\n            </UnorderedList>\r\n            <Switch>\r\n                <Route exact path=\"/zadania/:id\">\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path=\"/zadania\">\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path=\"/autor\">\r\n                    <AuthorPage />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Redirect to=\"zadania\" />\r\n                </Route>\r\n            </Switch>\r\n        </nav>\r\n    </HashRouter>\r\n);\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyle } from './GlobalStyle';\nimport { theme } from \"./theme\"\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        primaryColor: \"hsl(180, 100%, 25%)\",\r\n        backgroundColor: \"hsl(0, 0%, 93%)\",\r\n        disabledColor: \"hsl(0, 0%, 80%)\",\r\n        greenButtonColor: \"hsl(120, 100%, 25%)\",\r\n        redButtonColor: \"hsl(0, 100%, 50%)\",\r\n    },\r\n    breakPoints: {\r\n        mobile: 767,\r\n    },\r\n};"],"sourceRoot":""}