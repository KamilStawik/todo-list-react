{"version":3,"sources":["GlobalStyle.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSlice.js","features/tasks/tasksSaga.js","store.js","common/Container/index.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","features/tasks/Tasks.js","App.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","colors","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","tasksSlice","createSlice","name","initialState","tasks","hideDone","status","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","id","index","findIndex","done","removeTask","splice","setAllDone","forEach","fetchExampleTasks","setTasks","setStateAsLoading","setStateAsReady","selectTasksState","actions","selectTasks","selectHideDone","selectStatus","fetchExampleTasksHendler","watchFetchExampleTasks","delay","call","exampleTasks","all","put","alert","takeEvery","type","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","Container","styled","main","StyledForm","form","breakPoints","mobile","Input","input","Button","button","primaryColor","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","newTaskContentTrimed","trim","dispatch","useDispatch","onSubmit","event","preventDefault","content","nanoid","current","focus","value","ref","onChange","target","autoFocus","required","placeholder","StyledTasks","ul","ListItem","li","hidden","css","Content","span","greenButtonColor","toggleDone","remove","redButtonColor","TaskList","useSelector","map","onClick","StyledButtons","div","disabledColor","Buttons","exampleTasksButton","disabled","length","every","StyledSection","section","Header","header","HeaderText","h2","Section","title","body","extraContent","StyledHeader","h1","Tasks","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73dad210.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    body {\r\n        margin: 0;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n        background-color: ${({ theme }) => (theme.colors.backgroundColor)};\r\n        font-family: \"Lato\", sans-serif;\r\n    }\r\n    \r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n`;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n    return await response.json();\r\n};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n        status: \"ready\",\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: id }) => {\r\n            const index = tasks.findIndex(task => task.id === id);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: id }) => {\r\n            const index = tasks.findIndex(task => task.id === id);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload }) => {\r\n            state.tasks = payload;\r\n        },\r\n        setStateAsLoading: state => {\r\n            state.status = \"loading\";\r\n        },\r\n        setStateAsReady: state => {\r\n            state.status = \"ready\";\r\n        },\r\n    },\r\n});\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n    setStateAsLoading,\r\n    setStateAsReady,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectStatus = state => selectTasksState(state).status;\r\nexport default tasksSlice.reducer;","import { takeEvery, call, put, delay, all } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, setTasks, setStateAsReady } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHendler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield all([\r\n            put(setTasks(exampleTasks)),\r\n            put(setStateAsReady()),\r\n        ]);\r\n    }\r\n    catch (error) {\r\n        yield call(alert, \"Coś nie zadziałało\");\r\n    }\r\n}\r\n\r\nexport function* watchFetchExampleTasks() {\r\n    yield takeEvery(fetchExampleTasks.type, fetchExampleTasksHendler);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\"\r\nimport { watchFetchExampleTasks } from \"./features/tasks/tasksSaga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(watchFetchExampleTasks);\r\n\r\nexport default store;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n    max-width: 800px;\r\n    margin: 10px auto;\r\n    padding: 8px;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    background-color: hsl(0, 0%, 100%);\r\n    margin-top: 2px;\r\n    margin-bottom: 10px;\r\n    padding: 20px 10px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n            flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    max-width: 100%;\r\n    padding: 8px;\r\n    margin: 10px;\r\n    flex-grow: 1;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    padding: 10px 20px;\r\n    background-color: ${({ theme }) => (theme.colors.primaryColor)};\r\n    color: hsl(0, 0%, 100%);\r\n    margin: 10px;\r\n    cursor: pointer;\r\n    justify-self: flex-end;\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n    \r\n    &:active {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media(max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        width: 100%;\r\n    }\r\n`;","import React, { useState, useRef } from \"react\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const newTaskContentTrimed = newTaskContent.trim();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (newTaskContentTrimed === \"\") {\r\n            return\r\n        };\r\n        dispatch(addTask({\r\n            content: newTaskContentTrimed,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                ref={inputRef}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                autoFocus\r\n                required\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>Dodaj zadanie!</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTasks = styled.ul`\r\n    background-color: hsl(0, 0%, 100%);\r\n    list-style: none;\r\n    padding: 20px 10px;\r\n    margin-top: 2px;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    border-bottom: 1px solid ${({ theme }) => (theme.colors.backgroundColor)}px;\r\n    margin-top: 15px;\r\n    padding: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    word-break: break-word;\r\n    padding: 0px 10px;\r\n    flex-grow: 1;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    background-color: ${({ theme }) => (theme.colors.greenButtonColor)};\r\n    color: hsl(0, 0%, 100%);\r\n    font-weight: bold;\r\n    flex-shrink: 0;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => (theme.colors.greenButtonColor)};\r\n\r\n        &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => (theme.colors.redButtonColor)};\r\n\r\n        &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n    `} \r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasks } from \"../tasksSlice\";\r\nimport { StyledTasks, ListItem, Content, Button } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <StyledTasks>\r\n            {tasks.map(task => (\r\n                <ListItem key={task.id} hidden={task.done && hideDone}>\r\n                    <Button onClick={() => dispatch(toggleTaskDone(task.id))} toggleDone>\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button onClick={() => dispatch(removeTask(task.id))} remove>\r\n                        🗑\r\n                    </Button>\r\n                </ListItem>\r\n            ))}\r\n        </StyledTasks>\r\n    );\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: hsl(0, 0%, 100%);\r\n    color: ${({ theme }) => (theme.colors.primaryColor)};\r\n    margin: 10px 20px 10px 0px;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n    &&:disabled {\r\n        color: ${({ theme }) => (theme.colors.disabledColor)};\r\n        filter: brightness(100%);\r\n        cursor: auto;\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    selectTasks,\r\n    toggleHideDone,\r\n    setAllDone,\r\n    selectHideDone,\r\n    fetchExampleTasks,\r\n    setStateAsLoading,\r\n    selectStatus,\r\n} from \"../tasksSlice\";\r\nimport { StyledButtons, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ exampleTasksButton }) => {\r\n    const tasks = useSelector(selectTasks);\r\n    const status = useSelector(selectStatus);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    if (exampleTasksButton === true) {\r\n        return (\r\n            <StyledButtons>\r\n                <Button\r\n                    disabled={status === \"loading\" ? true : false}\r\n                    onClick={() => {\r\n                        dispatch(fetchExampleTasks())\r\n                        dispatch(setStateAsLoading())\r\n                    }}\r\n                >\r\n                    {status === \"ready\" ? \"Pobierz przykładowe zadania\" : \"Ładowanie\"}\r\n                </Button>\r\n            </StyledButtons >\r\n        );\r\n\r\n    } else {\r\n        return tasks.length > 0 && (\r\n            <StyledButtons>\r\n                <Button\r\n                    onClick={() => dispatch(toggleHideDone())}\r\n                >\r\n                    {hideDone === false ? \"Ukryj ukończone\" : \"Pokaż ukończone\"}\r\n                </Button>\r\n                <Button\r\n                    onClick={() => dispatch(setAllDone())}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Ukończ wszystkie\r\n                </Button>\r\n            </StyledButtons >\r\n        );\r\n    }\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: hsl(0, 0%, 100%);\r\n    margin-top: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        justify-content: center;\r\n    }\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    padding-left: 20px;\r\n    border-bottom: 2px solid ${({ theme }) => (theme.colors.backgroundColor)};\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n            flex-wrap: wrap;\r\n            justify-content: center;\r\n    }\r\n`;\r\n\r\nexport const HeaderText = styled.h2`\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        flex-basis: 100%;\r\n    }\r\n`;","import { Header, HeaderText, StyledSection } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraContent }) => (\r\n    <StyledSection>\r\n        <Header>\r\n            <HeaderText>{title}</HeaderText>\r\n            {extraContent}\r\n        </Header>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.h1`\r\n    padding: 10px;\r\n    font-weight: 900;\r\n`;","import { StyledHeader } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <StyledHeader>\r\n            {title}\r\n        </StyledHeader>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import { Container } from \"../../common/Container\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\n\nconst exampleTasksButton = true;\n\nconst Tasks = () => (\n    <Container>\n        <Header title=\"Lista zadań\" />\n        <Section\n            title=\"Dodaj nowe zadanie\"\n            body={<Form />}\n            extraContent={<Buttons exampleTasksButton={exampleTasksButton} />}\n        />\n        <Section\n            title=\"Lista zadań\"\n            body={<TaskList />}\n            extraContent={<Buttons />}\n        />\n    </Container>\n);\n\nexport default Tasks;","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks.js\"\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyle } from './GlobalStyle';\nimport { theme } from \"./theme\"\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        primaryColor: \"hsl(180, 100%, 25%)\",\r\n        backgroundColor: \"hsl(0, 0%, 93%)\",\r\n        disabledColor: \"hsl(0, 0%, 80%)\",\r\n        greenButtonColor: \"hsl(120, 100%, 25%)\",\r\n        redButtonColor: \"hsl(0, 100%, 50%)\",\r\n    },\r\n    breakPoints: {\r\n        mobile: 767,\r\n    },\r\n};"],"sourceRoot":""}