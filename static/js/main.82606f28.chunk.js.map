{"version":3,"sources":["GlobalStyle.js","reportWebVitals.js","features/tasks/tasksSlice.js","store.js","common/Container/index.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","features/tasks/Tasks.js","App.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","colors","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","removeTask","splice","setAllDone","forEach","actions","selectTasks","configureStore","reducer","tasksReducer","Container","styled","main","StyledForm","form","breakPoints","mobile","Input","input","Button","button","primaryColor","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","newTaskContentTrimed","trim","dispatch","useDispatch","onSubmit","event","preventDefault","content","nanoid","current","focus","value","ref","onChange","target","autoFocus","required","placeholder","StyledTasks","ul","ListItem","li","hidden","css","Content","span","greenButtonColor","toggleDone","remove","redButtonColor","TaskList","useSelector","map","onClick","StyledButtons","div","disabledColor","Buttons","length","disabled","every","StyledSection","section","Header","header","HeaderText","h2","Section","title","body","extraContent","StyledHeader","h1","Tasks","App","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.82606f28.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    body {\r\n        margin: 0;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n        background-color: ${({ theme }) => (theme.colors.backgroundColor)};\r\n        font-family: \"Lato\", sans-serif;\r\n    }\r\n    \r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n`;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks[index].done = !state.tasks[index].done;\r\n        },\r\n        removeTask: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks.splice(index, 1);\r\n        },\r\n        setAllDone: state => {\r\n            state.tasks.forEach(task => task.done = true);\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n    max-width: 800px;\r\n    margin: 10px auto;\r\n    padding: 8px;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    background-color: hsl(0, 0%, 100%);\r\n    margin-top: 2px;\r\n    margin-bottom: 10px;\r\n    padding: 20px 10px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n            flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    max-width: 100%;\r\n    padding: 8px;\r\n    margin: 10px;\r\n    flex-grow: 1;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    padding: 10px 20px;\r\n    background-color: ${({ theme }) => (theme.colors.primaryColor)};\r\n    color: hsl(0, 0%, 100%);\r\n    margin: 10px;\r\n    cursor: pointer;\r\n    justify-self: flex-end;\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n    \r\n    &:active {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media(max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        width: 100%;\r\n    }\r\n`;","import React, { useState, useRef } from \"react\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const newTaskContentTrimed = newTaskContent.trim();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (newTaskContentTrimed === \"\") {\r\n            return\r\n        };\r\n        dispatch(addTask({\r\n            content: newTaskContentTrimed,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                ref={inputRef}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                autoFocus\r\n                required\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>Dodaj zadanie!</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTasks = styled.ul`\r\n    background-color: hsl(0, 0%, 100%);\r\n    list-style: none;\r\n    padding: 20px 10px;\r\n    margin-top: 2px;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    border-bottom: 1px solid ${({ theme }) => (theme.colors.backgroundColor)}px;\r\n    margin-top: 15px;\r\n    padding: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    word-break: break-word;\r\n    padding: 0px 10px;\r\n    flex-grow: 1;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    background-color: ${({ theme }) => (theme.colors.greenButtonColor)};\r\n    color: hsl(0, 0%, 100%);\r\n    font-weight: bold;\r\n    flex-shrink: 0;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => (theme.colors.greenButtonColor)};\r\n\r\n        &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => (theme.colors.redButtonColor)};\r\n\r\n        &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n    `} \r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { StyledTasks, ListItem, Content, Button } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <StyledTasks>\r\n            {tasks.map(task => (\r\n                <ListItem key={task.id} hidden={task.done && hideDone}>\r\n                    <Button onClick={() => dispatch(toggleTaskDone(task.id))} toggleDone>\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done && hideDone}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button onClick={() => dispatch(removeTask(task.id))} remove>\r\n                        🗑\r\n                    </Button>\r\n                </ListItem>\r\n            ))}\r\n        </StyledTasks>\r\n    );\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: hsl(0, 0%, 100%);\r\n    color: ${({ theme }) => (theme.colors.primaryColor)};\r\n    margin: 10px 20px 10px 0px;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n    &:active {\r\n        filter: brightness(120%);;\r\n    }\r\n    &:disabled {\r\n        color: ${({ theme }) => (theme.colors.disabledColor)};\r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { StyledButtons, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    if (tasks.length === 0) {\r\n        return null;\r\n    } else\r\n        return (\r\n            <StyledButtons>\r\n                <Button\r\n                    onClick={() => dispatch(toggleHideDone())}\r\n                >\r\n                    {hideDone === false ? \"Ukryj ukończone\" : \"Pokaż ukończone\"}\r\n                </Button>\r\n                <Button\r\n                    onClick={() => dispatch(setAllDone())}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Ukończ wszystkie\r\n                </Button>\r\n            </StyledButtons >\r\n        );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: hsl(0, 0%, 100%);\r\n    margin-top: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        justify-content: center;\r\n    }\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    padding-left: 20px;\r\n    border-bottom: 2px solid ${({ theme }) => (theme.colors.backgroundColor)};\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n            flex-wrap: wrap;\r\n            justify-content: center;\r\n    }\r\n`;\r\n\r\nexport const HeaderText = styled.h2`\r\n    @media (max-width: ${({ theme }) => (theme.breakPoints.mobile)}px) {\r\n        flex-basis: 100%;\r\n    }\r\n`;","import { Header, HeaderText, StyledSection } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraContent }) => (\r\n    <StyledSection>\r\n        <Header>\r\n            <HeaderText>{title}</HeaderText>\r\n            {extraContent}\r\n        </Header>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.h1`\r\n    padding: 10px;\r\n    font-weight: 900;\r\n`;","import { StyledHeader } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <StyledHeader>\r\n            {title}\r\n        </StyledHeader>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import { Container } from \"../../common/Container\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\n\nconst Tasks = () => (\n    <Container>\n        <Header title=\"Lista zadań\" />\n        <Section\n            title=\"Dodaj nowe zadanie\"\n            body={<Form />}\n        />\n        <Section\n            title=\"Lista zadań\"\n            body={<TaskList />}\n            extraContent={<Buttons />}\n        />\n    </Container>\n);\n\nexport default Tasks;","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks.js\"\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyle } from './GlobalStyle';\nimport { theme } from \"./theme\"\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        primaryColor: \"hsl(180, 100%, 25%)\",\r\n        backgroundColor: \"hsl(0, 0%, 93%)\",\r\n        disabledColor: \"hsl(0, 0%, 80%)\",\r\n        greenButtonColor: \"hsl(120, 100%, 25%)\",\r\n        redButtonColor: \"hsl(0, 100%, 50%)\",\r\n    },\r\n    breakPoints: {\r\n        mobile: 767,\r\n    },\r\n};"],"sourceRoot":""}